module InitSmart.MonoidUnbias where

--
-- unbiased version of
-- the generic monoid (living in the monoidal category generated by it)
--

-- the three layers of category
data Layer : Set where
  Ob : Layer
  Mor : Layer
  Equ : Layer

mutual

  infix 1 _⇒_ _≡_
  infixl 10 _MulMor_ _MulEqu_ _MulMorEqu_ 

  ---------------------------------------
  -- internal 'types' of terms
  ---------------------------------------
  data “_” : Layer → Set 
    where

      -- formal terminal category
      Unit : “ Cat ”

      -- (objects of) the free category, generated by monoid
      Free : “ Ob ”

      -- free monoidal category, generated by `t`
      ᴼ : (t : “ Ob ”) → “ Ob ”

      -- morphisms between objects in `t`
      _⇒_ : {t : “ Ob ”} → (source target : « t ») → “ Mor ”

      -- equalities between morphisms in `t`
      _≡_ : {t : “ Mor ”} → (source target : « t ») → “ Equ ”

  ---------------------------------------
  -- terms of internal 'types'
  ---------------------------------------
  data «_» : {layer : Layer} → “ layer ” → Set 
    where

      --=====================
      -- system : category structure
      --=====================

      -- identity morphism
      IdMor : 

        {cat : “ Ob ”} → 
        {x : « cat »} → 
        --------------
        « x ⇒ x »

      -- composition of morphisms
      _MulMor_ : 

        {cat : “ Ob ”} → 
        {x y z : « cat »} → 
        « x ⇒ y » → 
        « y ⇒ z » → 
        ---------------
        « x ⇒ z »

      -- identity equality / reflixivity
      IdEqu : 

        {cat : “ Ob ”} → 
        {x y : « cat »} → 
        {f : « x ⇒ y »} → 
        -----------------
        « f ≡ f »

      -- composition of equalities / transitivity
      _MulEqu_ : 

        {cat : “ Ob ”} → 
        {x y : « cat »} → 
        {f g h : « x ⇒ y »} → 
        « f ≡ g » → 
        « g ≡ h » → 
        ---------------
        « f ≡ h »

      -- inverse equality / symmetry
      InvEqu : 

        {cat : “ Ob ”} → 
        {x y : « cat »} → 
        {f g : « x ⇒ y »} → 
        « f ≡ g » → 
        --------------
        « g ≡ f »

      -- composition of morphisms is congruence
      _MulMorEqu_ : 

        {cat : “ Ob ”} → 
        {x y z : « cat »} → 
        {f f' : « x ⇒ y »} → 
        {g g' : « y ⇒ z »} → 
        « f ≡ f' » → 
        « g ≡ g' » → 
        -------------------------------------------
        « f MulMor g ≡ f' MulMor g' »

      -- identity is left neutral
      NeutrLeftEqu : 

        {cat : “ Ob ”} → 
        {x y : « cat »} → 
        {f : « x ⇒ y »} → 
        -------------------
        « IdMor MulMor f ≡ f »

      -- identity is right neutral
      NeutrRightEqu : 

        {cat : “ Ob ”} → 
        {x y : « cat »} → 
        {f : « x ⇒ y »} → 
        -------------------
        « f MulMor IdMor ≡ f »

      -- morphism composition is associative
      AssocEqu : 

        {cat : “ Ob ”} → 
        {a b c d : « cat »} → 
        {f : « a ⇒ b »} → 
        {g : « b ⇒ c »} → 
        {h : « c ⇒ d »} → 
        ----------------------
        « (f MulMor g) MulMor h ≡ f MulMor (g MulMor h) »

      --============================
      -- system : monoidal category structure
      --============================

      -- empty object-sequence of objects
      EmptyᴼOb : 

        {cat : “ Ob ”} → 
        ----------------
        « ᴼ cat »

      -- cons for object-sequence of objects
      _ᴼ,ᴼ_ : 

        {cat : “ Ob ”} → 
        « cat » → 
        « ᴼ cat » → 
        -------------
        « ᴼ cat »

      -- empty object-sequence of morphisms
      EmptyᴼMor : 

        {cat : “ Ob ”} → 
        -------------------------------
        « EmptyᴼOb ⇒ EmptyᴼOb {cat = cat} »

      -- cons for object-sequence of objects
      _ᴼ,ᴹ_ : 

        {cat : “ Ob ”} → 
        {x y : « cat »} → 
        {xs ys : « ᴼ cat »} → 
        « x ⇒ y » → 
        « xs ⇒ ys » → 
        -------------------
        « (x ᴼ,ᴼ xs) ⇒ (y ᴼ,ᴼ ys) »

      -- empty object-sequence of equalities
      EmptyᴼEqu : 

        {cat : “ Ob ”} → 
        ------------------------
        « EmptyᴼMor ≡ EmptyᴼMor {cat = cat} »

      -- cons for object-sequence of equalities
      _ᴼ,ᴱ_ : 

        {cat : “ Ob ”} → 
        {x x' : « cat »} → 
        {xs xs' : « ᴼ cat »} → 
        {f f' : « x ⇒ x' »} → 
        {fs fs' : « xs ⇒ xs' »} → 
        « f ≡ f' » → 
        « fs ≡ fs' » → 
        ---------------------------
        « (f ᴼ,ᴹ fs) ≡ (f' ᴼ,ᴹ fs') »

      -- paste object-sequence of objects
      ᴼ[_]ᴼ : 

        {cat : “ Ob ”} → 
        « ᴼ cat » → 
        -------------
        « cat »

      -- paste object-sequence of morphisms
      ᴼ[_]ᴹ : 

        {cat : “ Ob ”} → 
        {xs xs' : « ᴼ cat »} → 
        « xs ⇒ xs' » → 
        ---------------------------------------
        « ᴼ[ xs ]ᴼ ⇒ ᴼ[ xs' ]ᴼ »

      -- paste object-sequence of equalities
      ᴼ[_]ᴱ : 

        {cat : “ Ob ”} → 
        {xs xs' : « ᴼ cat »} → 
        {fs fs' : « xs ⇒ xs' »} → 
        « fs ≡ fs' » → 
        ------------------------------------------------------
        « ᴼ[ fs ]ᴹ ≡ ᴼ[ fs' ]ᴹ »

      -- paste object-sequence, functoriality at identity
      PasteObIdEqu : 

        {cat : “ Ob ”} → 
        {xs : « ᴼ cat »} →
        ----------------------
        « ᴼ[ IdMor {x = xs} ]ᴹ ≡ IdMor {x = ᴼ[ xs ]ᴼ} »

      -- paste object-sequence, functoriality at composition
      PasteObMulEqu : 

        {cat : “ Ob ”} → 
        {xs ys zs : « ᴼ cat »} →
        (fs : « xs ⇒ ys ») → (gs : « ys ⇒ ys ») →
        -----------------------------------------------------
        « ᴼ[ fs MulMor gs ]ᴹ ≡ ᴼ[ fs ]ᴹ MulMor ᴼ[ gs ]ᴹ »

      -- TODO PasteCohUnitIso, PasteCohCompIso
      -- TODO Coherence equalities

      --====================
      -- applied : monoid structure
      --====================
    {-
      -- the carrier object
      ElOb : 
        « Free »

      -- the unity of the monoid
      PasteEl : 
        « pow n ElOb ⇒ ElOb »

      -- coherence comp
      -- coherence unit
    -}
